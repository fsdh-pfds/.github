name: JIT Org Admin Cleanup

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *" # Runs every hour

permissions: read-all

jobs:
  deprovision:
    runs-on: ubuntu-latest
    steps:
      - name: Create App token
        id: create_token
        uses: fsdh-pfds/.github/.github/actions/create-app-token@main
        with:
          app-id: ${{ vars.FSDH_ORG_ADMIN_PROMOTION_APP_ID }}
          private-key: ${{ secrets.FSDH_ORG_ADMIN_PROMOTION_APP_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Fetch full history instead of a shallow clone
          token: ${{ steps.create_token.outputs.token }}

      - name: Process Expired Admin Requests
        run: |
          # Using a while-read loop with null termination for robust filename handling.
          find ./org-admin -type f -name "*.json" -print0 | while IFS= read -r -d '' file; do
            echo "Processing file: $file"

            # Extract username and duration from the JSON file.
            username=$(jq -r '.username' "$file")
            duration=$(jq -r '.duration' "$file")
            echo "Username: $username, Duration: $duration hour(s)"

            # Get the commit timestamp (Unix epoch) for the file's last commit.
            commit_ts=$(git log --reverse --format=%ct -- "$file" | head -n 1)
            echo "File commit timestamp: $commit_ts"

            # Convert duration from hours to seconds.
            duration_seconds=$(( duration * 3600 ))

            # Calculate the expiration timestamp.
            expiration=$(( commit_ts + duration_seconds ))

            # Get the current Unix timestamp.
            current_ts=$(date +%s)
            echo "Expiration timestamp: $expiration, Current timestamp: $current_ts"

            # If the current time is greater than or equal to the expiration, proceed.
            if [ "$current_ts" -ge "$expiration" ]; then
              echo "Request for $username expired. Demoting user and removing file."

              # Demote the user: update their org membership to "member" using gh CLI.
              gh api --method PUT "/orgs/${{ github.repository_owner }}/memberships/$username" -f role=member --silent
              git rm "$file"
            else
              echo "Request for $username is still valid."
            fi
          done

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name "FSDH Org Admin Manager App"
            git config --global user.email "<${{ vars.FSDH_TEAM_ADMIN_APP_ID }}+FSDH Org Admin Manager App[bot]@users.noreply.github.com>"
            git commit -m "Remove expired admin requests"
            git push
          else
            echo "No expired requests to remove."
          fi
