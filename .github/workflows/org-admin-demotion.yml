name: JIT Org Admin Cleanup

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *" # Runs every hour

jobs:
  deprovision:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Create App token
        id: create_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.FSDH_TEAM_ADMIN_APP_ID }}
          private-key: ${{ secrets.FSDH_TEAM_ADMIN_APP_KEY }}
          owner: ${{ github.repository_owner }}
          
      - name: Set up GitHub CLI
        run: |
          # Login with the app token generated above.
          gh auth login --with-token < <(echo "${{ steps.create_token.outputs.token }}")

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history instead of a shallow clone

      - name: Process Expired Admin Requests
        run: |
          org="${{ github.repository_owner }}"
          # Find all JSON files in the org-admin folder.
          for file in $(find ./org-admin -type f -name "*.json"); do
            echo "Processing file: $file"
            # Extract username and duration from the JSON file.
            username=$(jq -r '.username' "$file")
            duration=$(jq -r '.duration' "$file")
            echo "Username: $username, Duration: $duration hour(s)"

            # Get the commit timestamp (Unix epoch) for the file's last commit.
            commit_ts=$(git log --reverse --format=%ct -- "$file" | head -n 1)
            echo "File commit timestamp: $commit_ts"

            # Convert duration from hours to seconds.
            duration_seconds=$(( duration * 3600 ))
            # Calculate the expiration timestamp.
            expiration=$(( commit_ts + duration_seconds ))
            # Get the current Unix timestamp.
            current_ts=$(date +%s)
            echo "Expiration timestamp: $expiration, Current timestamp: $current_ts"

            # If the current time is greater than or equal to the expiration, proceed.
            if [ "$current_ts" -ge "$expiration" ]; then
              echo "Request for $username expired. Demoting user and removing file."
              # Demote the user: update their org membership to "member" using gh CLI.
              gh api -X PUT "/orgs/${{ github.repository_owner }}/memberships/$username" -f role=member --silent
              # Remove the request file.
              git rm "$file"
            else
              echo "Request for $username is still valid."
            fi
          done

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name "FSDH Org Admin Manager App"
            git config --global user.email "<${{ vars.FSDH_TEAM_ADMIN_APP_ID }}+FSDH Org Admin Manager App[bot]@users.noreply.github.com>"
            git commit -m "Remove expired admin requests"
            # Update the remote URL to include the app token for authentication
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
            git push origin HEAD:${{ github.ref }}
          else
            echo "No expired requests to remove."
          fi
