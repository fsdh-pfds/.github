name: Configure Branch Protection Rulesets (Management Repo)

on:
  push:
    paths:
      - ".github/workflows/branch-rulesets/**/*.json"
      - ".github/workflows/org-rulesets.yml"
  schedule:
    - cron: "0 6 * * *" # Run daily at 6 AM
  workflow_dispatch:

permissions: read-all

jobs:
  configure_rulesets_across_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Convert App token (GitHub App with repo admin perms)
        id: create_token
        uses: getsentry/action-github-app-token@v3.0.0
        with:
          app_id: ${{ vars.FSDH_REPO_ADMIN_APP_ID }}
          private_key: ${{ secrets.FSDH_REPO_ADMIN_APP_KEY }}

      - name: Checkout management repo
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Configure rulesets in target repos
        env:
          GH_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          set -e
          # List all repositories in the organization
          repos=$(gh api orgs/${{ github.repository_owner }}/repos --jq '.[].name')
          echo "Found repositories: $repos"

          for repo in $repos; do
            echo "Processing repository: $repo"

            # Check if the folder for this repo exists
            repo_ruleset_folder=".github/workflows/branch-rulesets/$repo"
            if [ ! -d "$repo_ruleset_folder" ]; then
              echo "No ruleset folder found for $repo. Skipping."
              continue
            fi

            # Find JSON files for this repo
            repo_json_files=$(find "$repo_ruleset_folder" -type f -name '*.json')
            if [ -z "$repo_json_files" ]; then
              echo "No JSON files found in $repo_ruleset_folder. Skipping."
              continue
            fi

            echo "Retrieving existing rulesets for $repo..."
            # Grab the JSON response of existing rulesets
            existing_rulesets_json=$(gh api repos/${{ github.repository_owner }}/$repo/rulesets)

            # Use jq to build an associative array of name -> id
            declare -A ruleset_map=()
            while IFS=',' read -r r_name r_id; do
              r_name="${r_name//\"/}"  # remove extra quotes if present
              r_id="${r_id//\"/}"    # remove extra quotes if present
              ruleset_map["$r_name"]="$r_id"
            done < <(echo "$existing_rulesets_json" | jq -r '.[] | [ .name, .id ] | @csv')

            # Build a list of existing ruleset names (for deletion checks)
            existing_ruleset_names=$(printf "%s\n" "${!ruleset_map[@]}")
            echo "Existing rulesets: $existing_ruleset_names"

            # Delete obsolete rulesets not in templates
            for name in $existing_ruleset_names; do
              id_to_delete="${ruleset_map[$name]}"
              # If there's no corresponding JSON for this ruleset name, delete it
              if ! echo "$repo_json_files" | grep -q "/$name.json"; then
                echo "Deleting obsolete ruleset '$name' (ID: $id_to_delete) in $repo"
                gh api repos/${{ github.repository_owner }}/$repo/rulesets/$id_to_delete \
                  --method DELETE
              fi
            done

            # Now update or create rulesets from JSON
            for json_file in $repo_json_files; do
              template_name=$(basename "$json_file" .json)
              # If this ruleset name already exists, update by ID
              if [[ -n "${ruleset_map[$template_name]}" ]]; then
                ruleset_id="${ruleset_map[$template_name]}"
                echo "Updating ruleset '$template_name' (ID: $ruleset_id) in $repo"
                gh api repos/${{ github.repository_owner }}/$repo/rulesets/$ruleset_id \
                  --method PUT \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  --input "$json_file"
              else
                # Otherwise create a new one
                echo "Creating new ruleset '$template_name' in $repo"
                gh api repos/${{ github.repository_owner }}/$repo/rulesets \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  --input "$json_file"
              fi
            done

            # Clear the ruleset_map after each repo to avoid cross-contamination
            unset ruleset_map
          done
