name: Configure Branch Protection Rulesets (Management Repo)

on:
  push:
    # Run if any .json file is modified or created/removed:
    paths:
      - ".github/workflows/branch-rulesets/**/*.json"
      - ".github/workflows/org-rulesets.yml"    
  schedule:
    - cron: "0 6 * * *" # Run at 6 AM daily
  workflow_dispatch:

permissions: read-all

jobs:
  configure_rulesets_across_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Convert App token (GitHub App with repo admin perms)
        id: create_token
        uses: getsentry/action-github-app-token@v3.0.0
        with:
          app_id: ${{ vars.FSDH_REPO_ADMIN_APP_ID }}
          private_key: ${{ secrets.FSDH_REPO_ADMIN_APP_KEY }}

      - name: Checkout management repo
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          # Log into the gh CLI using the GitHub App token
          gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Configure rulesets in target repos
        env:
          GH_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          # List all repositories in the organization
          repos=$(gh api orgs/${{ github.repository_owner }}/repos --jq '.[].name')
          echo "Found repositories: $repos"

          # Find all branch ruleset JSON templates
          json_files=$(find .github/workflows/branch-rulesets -type f -name '*.json')
          echo "Found JSON files: $json_files"

          # Loop through repositories and process each
          for repo in $repos; do
            echo "Processing repository: $repo"

            # List existing branch protection rulesets
            existing_rulesets=$(gh api repos/${{ github.repository_owner }}/$repo/rulesets --jq '.[].name')
            echo "Existing rulesets for $repo: $existing_rulesets"

            # Loop through JSON files and match against repo
            for json_file in $json_files; do
              template_repo=$(basename $(dirname $json_file))  # Extract repo name from path
              template_name=$(basename $json_file .json)      # Extract ruleset name

              # Check if the ruleset exists
              if echo "$existing_rulesets" | grep -q "$template_name"; then
                echo "Updating ruleset $template_name in $repo"
                gh api repos/${{ github.repository_owner }}/$repo/rulesets/$template_name \
                  --method PATCH \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  --input "$json_file"
              else
                echo "Creating new ruleset $template_name in $repo"
                gh api repos/${{ github.repository_owner }}/$repo/rulesets \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  --input "$json_file"
              fi
            done

            # Delete obsolete rulesets not in templates
            for ruleset in $existing_rulesets; do
              if ! echo "$json_files" | grep -q "$repo/$ruleset.json"; then
                echo "Deleting obsolete ruleset $ruleset in $repo"
                gh api repos/${{ github.repository_owner }}/$repo/rulesets/$ruleset -X DELETE
              fi
            done
          done
