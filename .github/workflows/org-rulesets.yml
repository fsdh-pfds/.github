name: Configure Branch Protection Rulesets (Management Repo)

on:
  push:
    paths:
      - ".github/workflows/branch-rulesets/**/*.json"
      - ".github/workflows/org-rulesets.yml"
  schedule:
    - cron: "0 6 * * *" # Run daily at 6 AM
  workflow_dispatch:

permissions: read-all

jobs:
  configure_rulesets_across_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Convert App token (GitHub App with repo admin perms)
        id: create_token
        uses: getsentry/action-github-app-token@v3.0.0
        with:
          app_id: ${{ vars.FSDH_REPO_ADMIN_APP_ID }}
          private_key: ${{ secrets.FSDH_REPO_ADMIN_APP_KEY }}

      - name: Checkout management repo
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Configure rulesets in target repos
        env:
          GH_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          set -e
          # List all repositories in the organization
          repos=$(gh api orgs/${{ github.repository_owner }}/repos --jq '.[].name')
          echo "Found repositories: $repos"

          # Loop through repositories and process each
          for repo in $repos; do
            echo "Processing repository: $repo"

            # Check if the folder for this repo exists
            repo_ruleset_folder=".github/workflows/branch-rulesets/$repo"
            if [ ! -d "$repo_ruleset_folder" ]; then
              echo "No ruleset folder found for $repo. Skipping."
              continue
            fi

            # Find JSON files for this repo
            repo_json_files=$(find "$repo_ruleset_folder" -type f -name '*.json')
            if [ -z "$repo_json_files" ]; then
              echo "No JSON files found in $repo_ruleset_folder. Skipping."
              continue
            fi

            # List existing branch protection rulesets and their IDs
            existing_rulesets=$(gh api repos/${{ github.repository_owner }}/$repo/rulesets --jq '.[] | {name: .name, id: .id}')
            echo "Existing rulesets for $repo: $existing_rulesets"

            # Delete obsolete rulesets not in templates
            for ruleset in $(echo "$existing_rulesets" | jq -r '.name'); do
              ruleset_id=$(echo "$existing_rulesets" | jq -r ".[] | select(.name == \"$ruleset\") | .id")
              if ! echo "$repo_json_files" | grep -q "/$ruleset.json"; then
                echo "Deleting obsolete ruleset $ruleset (ID: $ruleset_id) in $repo"
                if ! gh api repos/${{ github.repository_owner }}/$repo/rulesets/$ruleset_id -X DELETE; then
                  echo "Failed to delete ruleset $ruleset in $repo. Skipping."
                fi
              fi
            done

            # Loop through JSON files and match against repo
            for json_file in $repo_json_files; do
              template_name=$(basename "$json_file" .json)  # Extract ruleset name
              ruleset_id=$(echo "$existing_rulesets" | jq -r "select(.name == \"$template_name\") | .id")

              # Check if the ruleset exists
              if [ -n "$ruleset_id" ]; then
                echo "Updating ruleset $template_name (ID: $ruleset_id) in $repo"
                if ! gh api repos/${{ github.repository_owner }}/$repo/rulesets/$ruleset_id \
                  --method PUT \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  --input "$json_file"; then
                  echo "Failed to update ruleset $template_name in $repo. Skipping."
                fi
              else
                echo "Creating new ruleset $template_name in $repo"
                if ! gh api repos/${{ github.repository_owner }}/$repo/rulesets \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  --input "$json_file"; then
                  echo "Failed to create ruleset $template_name in $repo. Skipping."
                fi
              fi
            done
          done
