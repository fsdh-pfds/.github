name: Manage Organization Teams

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "org-team-configs/*.json"

permissions:
  contents: read

jobs:
  manage-teams:
    runs-on: ubuntu-latest

    steps:
      - name: Create App token
        id: create_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.FSDH_TEAM_ADMIN_APP_ID }}
          private-key: ${{ secrets.FSDH_TEAM_ADMIN_APP_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Process Team Configurations
        run: |
          set -euo pipefail

          # Find all JSON files in org-team-configs (including hidden files)
          mapfile -t team_files < <(find ./org-team-configs -maxdepth 1 -type f -name "*.json")
          if [ ${#team_files[@]} -eq 0 ]; then
            echo "No team configuration files found. Exiting."
            exit 0
          fi

          valid_team_files=()
          for team_file in "${team_files[@]}"; do
            echo "Validating ${team_file}..."
            if jq empty "$team_file" 2>/dev/null; then
              echo "Valid JSON in ${team_file}"
              valid_team_files+=("$team_file")
            else
              echo "Invalid JSON in ${team_file}"
            fi
          done

          if [ ${#valid_team_files[@]} -eq 0 ]; then
            echo "No valid team configuration files found. Exiting."
            exit 1
          fi

          # Fetch existing teams (by slug) from the organization
          mapfile -t existing_teams < <(gh api orgs/${{ github.repository_owner }}/teams --jq '.[].slug')

          # Process each valid team file
          for team_file in "${valid_team_files[@]}"; do
            team=$(cat "$team_file")
            TEAM_NAME=$(echo "$team" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TEAM_DESCRIPTION=$(echo "$team" | jq -r '.description // ""')
            TEAM_PRIVACY=$(echo "$team" | jq -r '.privacy // "closed"')
            TEAM_PERMISSION=$(echo "$team" | jq -r '.permission // "push"')
            TEAM_NOTIFICATION=$(echo "$team" | jq -r '.notification_setting // "notifications_enabled"')

            if printf '%s\n' "${existing_teams[@]}" | grep -qx "${TEAM_SLUG}"; then
              echo "[UPDATE] Team: ${TEAM_NAME}"
              gh api --method PATCH \
                -H "Accept: application/vnd.github+json" \
                "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}" \
                -f "name=${TEAM_NAME}" \
                -f "description=${TEAM_DESCRIPTION}" \
                -f "privacy=${TEAM_PRIVACY}" \
                -f "notification_setting=${TEAM_NOTIFICATION}" \
                --silent
            else
              echo "[CREATE] Team: ${TEAM_NAME}"
              gh api --method POST \
                -H "Accept: application/vnd.github+json" \
                "/orgs/${{ github.repository_owner }}/teams" \
                -f "name=${TEAM_NAME}" \
                -f "description=${TEAM_DESCRIPTION}" \
                -f "privacy=${TEAM_PRIVACY}" \
                -f "permission=${TEAM_PERMISSION}" \
                -f "notification_setting=${TEAM_NOTIFICATION}" \
                --silent
            fi
          done

          # Remove teams that no longer have a corresponding config file
          for team_slug in "${existing_teams[@]}"; do
            if ! find ./org-team-configs -maxdepth 1 -type f -name "${team_slug}.json" | grep -q .; then
              echo "[DELETE] Team: ${team_slug}"
              gh api --method DELETE \
                -H "Accept: application/vnd.github+json" \
                "/orgs/${{ github.repository_owner }}/teams/${team_slug}" \
                --silent
            fi
          done

      - name: Manage Team Member Enrollment
        run: |
          set -euo pipefail

          # Get all team configuration files (including hidden files)
          mapfile -t team_files < <(find ./org-team-configs -maxdepth 1 -type f -name "*.json")

          for team_file in "${team_files[@]}"; do
            echo "Processing team config: $team_file"
            team=$(cat "$team_file")
            TEAM_NAME=$(echo "$team" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TEAM_MEMBERS=$(echo "$team" | jq -c '.members // []')

            # Fetch current team members and organization members as arrays
            mapfile -t current_members < <(gh api "orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/members" --jq '.[].login')
            mapfile -t current_org_members < <(gh api "/orgs/${{ github.repository_owner }}/members" --jq '.[].login')
            org_members_str=$(printf "%s\n" "${current_org_members[@]}")

            # Add members from the config file if they're not already in the team
            echo "$TEAM_MEMBERS" | jq -c '.[]' | while read -r member; do
              username=$(echo "$member" | jq -r '.username')
              if echo "$org_members_str" | grep -qw "$username"; then
                if printf '%s\n' "${current_members[@]}" | grep -qx "$username"; then
                  echo "[SKIP] ${username} is already a member of ${TEAM_NAME}."
                else
                  echo "[ADD] Adding ${username} to ${TEAM_NAME}."
                  gh api --method PUT \
                    -H "Accept: application/vnd.github+json" \
                    "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/memberships/${username}" \
                    --silent
                fi
              else
                echo "User ${username} is not an organization member. Skipping..."
              fi
            done

            # Remove current team members that are not present in the JSON config
            for member in "${current_members[@]}"; do
              if ! echo "$TEAM_MEMBERS" | jq -e --arg member "$member" 'map(.username) | index($member)' >/dev/null; then
                echo "[REMOVE] Removing ${member} from ${TEAM_NAME}."
                gh api --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/memberships/${member}" \
                  --silent
              else
                echo "[KEEP] ${member} remains in ${TEAM_NAME}."
              fi
            done
          done
